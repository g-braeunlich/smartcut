import unittest

import smartcut


class SmartCutTest(unittest.TestCase):
    def test_to_seconds(self):
        with self.subTest(fps=25):
            t = smartcut.to_seconds(10, 25.0)
            self.assertEqual(t, "0.400")
        with self.subTest(fps=50):
            t = smartcut.to_seconds(10, 50.0)
            self.assertEqual(t, "0.200")

    def test_to_timestamp(self):
        t = smartcut.to_timestamp(6611, 25.0)
        self.assertEqual(t, "00:04:24.440")

    def test_parse_to_arrays(self):
        mapping = {
            r"alpha ?= ?(.*)$": smartcut.Tgt("alpha", int),
            r"beta ?= ?(.*)$": smartcut.Tgt("beta"),
            r"gamma ?= ?(.*)$": smartcut.Tgt("gamma"),
        }
        s = ("alpha =1", "beta= 2", "gamma = 3", "alpha = 2", "beta = 0", "alpha = 4")
        self.assertEqual(
            smartcut.parse(s, mapping),
            {"alpha": [1, 2, 4], "beta": ["2", "0"], "gamma": "3"},
        )

    def test_parse_to_dict(self):
        mapping = {
            r"Writing library *: *x264 core ([0-9]*)": smartcut.Tgt("x264_core"),
            r"Color primaries *: (.*[^ ]) *$": smartcut.Tgt("color_primaries"),
            r"Format profile *: ([^@]*)@L([0-9]*) *$": (
                smartcut.Tgt("format_profile_profile"),
                smartcut.Tgt("format_profile_level"),
            ),
            r"Frame rate *: ([0-9\.]*) FPS": smartcut.Tgt("framerate"),
        }
        s = (
            "E: File read error",
            "Writing library                          : libebml v1.3.4 + libmatroska v1.4.5",
            "Writing library                          : x264 core 125 r2200 999b753",
            "Format profile                           : High@L3",
            "Frame rate mode                          : Constant",
            "Frame rate                               : 25.000 FPS",
            "Color primaries                          : BT.601 PAL",
        )
        self.assertEqual(
            smartcut.parse(s, mapping),
            {
                "x264_core": "125",
                "color_primaries": "BT.601 PAL",
                "format_profile_profile": "High",
                "format_profile_level": "3",
                "framerate": "25.000",
            },
        )

    def test_smartcut(self):
        output = []
        smartcut.cmd_exec = lambda cmd, **kwargs: output.append(cmd)
        f_info = {
            "color_primaries": "BT.601 PAL\n",
            "framerate": 25.0,
            "format_profile_profile": "High",
            "format_profile_level": 3.0,
            "x264_core": "125",
        }
        smartcut.get_encoder_infos = lambda *x: f_info
        smartcut.load_keyframes_from_file = lambda f: keyframes

        stream = (
            "[Info]",
            "Author=g",
            "RatingByAuthor=4",
            "EPGError=0",
            "ActualContent=",
            "MissingBeginning=0",
            "MissingEnding=0",
            "MissingVideo=0",
            "MissingAudio=0",
            "OtherError=0",
            "OtherErrorDescription=",
            "SuggestedMovieName=SuggestedMovieName.mkv",
            "",
            "[Cut0]",
            "Start=264.44",
            "Duration=1164.36",
            "StartFrame=6611",
            "DurationFrames=29109",
            "[Cut1]",
            "Start=1765.72",
            "Duration=1240.24",
            "StartFrame=44143",
            "DurationFrames=31006",
        )

        keyframes = (
            0,
            38,
            106,
            155,
            369,
            455,
            504,
            533,
            607,
            644,
            701,
            733,
            774,
            814,
            848,
            919,
            945,
            1119,
            1220,
            1286,
            1325,
            1370,
            1443,
            1483,
            1529,
            1587,
            1642,
            1892,
            1990,
            2074,
            2129,
            2185,
            2220,
            2284,
            2315,
            2479,
            2643,
            2710,
            2820,
            2963,
            3092,
            3292,
            3494,
            3557,
            3593,
            3659,
            3732,
            3798,
            3842,
            3904,
            3948,
            4043,
            4244,
            4317,
            4361,
            4404,
            4443,
            4474,
            4529,
            4568,
            4595,
            4620,
            4663,
            4731,
            4780,
            4994,
            5080,
            5129,
            5158,
            5232,
            5269,
            5306,
            5345,
            5377,
            5418,
            5473,
            5544,
            5578,
            5746,
            5996,
            6246,
            6496,
            6746,
            6793,
            6910,
            6961,
            7097,
            7145,
            7265,
            7385,
            7517,
            7767,
            8017,
            8267,
            8357,
            8401,
            8500,
            8528,
            8608,
            8703,
            8731,
            8784,
            8835,
            8884,
            9089,
            9181,
            9431,
            9681,
            9931,
            10181,
            10431,
            10578,
            10828,
            11078,
            11327,
            11577,
            11827,
            12077,
            12327,
            12563,
            12773,
            12994,
            13118,
            13203,
            13268,
            13442,
            13553,
            13803,
            13912,
            13971,
            14133,
            14297,
            14374,
            14414,
            14645,
            14689,
            14939,
            15189,
            15293,
            15543,
            15650,
            15728,
            15844,
            15989,
            16135,
            16168,
            16198,
            16433,
            16484,
            16734,
            16984,
            17117,
            17243,
            17301,
            17551,
            17605,
            17692,
            17782,
            17842,
            18038,
            18164,
            18330,
            18389,
            18504,
            18574,
            18659,
            18738,
            18928,
            19132,
            19361,
            19578,
            19644,
            19737,
            19987,
            20237,
            20406,
            20645,
            20749,
            20820,
            20854,
            20963,
            20991,
            21139,
            21175,
            21225,
            21399,
            21442,
            21483,
            21515,
            21654,
            21742,
            21932,
            22070,
            22119,
            22190,
            22307,
            22557,
            22669,
            22745,
            22813,
            22863,
            22912,
            23162,
            23242,
            23348,
            23522,
            23641,
            23705,
            23789,
            24039,
            24150,
            24240,
            24490,
            24740,
            24990,
            25240,
            25490,
            25740,
            25805,
            25905,
            25972,
            26092,
            26175,
            26219,
            26469,
            26529,
            26599,
            26651,
            26692,
            26895,
            27109,
            27245,
            27293,
            27529,
            27779,
            28029,
            28186,
            28436,
            28686,
            28936,
            29186,
            29405,
            29655,
            29905,
            30155,
            30405,
            30489,
            30739,
            30957,
            31012,
            31104,
            31200,
            31393,
            31643,
            31853,
            32103,
            32163,
            32256,
            32349,
            32392,
            32483,
            32521,
            32589,
            32627,
            32671,
            32921,
            33114,
            33232,
            33337,
            33405,
            33651,
            33697,
            33786,
            33858,
            33917,
            33968,
            34007,
            34167,
            34235,
            34304,
            34518,
            34605,
            34679,
            34785,
            35035,
            35285,
            35535,
            35746,
            35821,
            35861,
            35910,
            35939,
            35968,
            36014,
            36069,
            36148,
            36189,
            36299,
            36452,
            36502,
            36604,
            36673,
            36722,
            36783,
            36826,
            36880,
            36958,
            37208,
            37296,
            37454,
            37506,
            37544,
            37606,
            37646,
            37673,
            37732,
            37781,
            37847,
            37917,
            37970,
            38033,
            38090,
            38115,
            38160,
            38208,
            38266,
            38318,
            38366,
            38429,
            38476,
            38507,
            38576,
            38608,
            38666,
            38716,
            38767,
            38837,
            38882,
            38982,
            39011,
            39047,
            39076,
            39105,
            39158,
            39189,
            39255,
            39280,
            39311,
            39345,
            39371,
            39404,
            39488,
            39569,
            39605,
            39631,
            39728,
            39755,
            39812,
            39838,
            39880,
            39994,
            40029,
            40116,
            40217,
            40300,
            40357,
            40398,
            40500,
            40586,
            40631,
            40694,
            40725,
            40769,
            40808,
            40838,
            40914,
            41034,
            41101,
            41134,
            41165,
            41256,
            41384,
            41494,
            41605,
            41688,
            41762,
            41830,
            41864,
            41927,
            41989,
            42029,
            42131,
            42195,
            42248,
            42283,
            42316,
            42342,
            42516,
            42637,
            42721,
            42776,
            42832,
            42867,
            42931,
            42962,
            43114,
            43290,
            43357,
            43597,
            43739,
            43939,
            44150,
            44383,
            44461,
            44690,
            44937,
            45163,
            45296,
            45546,
            45643,
            45848,
            45952,
            45997,
            46140,
            46213,
            46274,
            46524,
            46774,
            47024,
            47235,
            47298,
            47366,
            47421,
            47446,
            47696,
            47946,
            48196,
            48412,
            48594,
            48674,
            48924,
            49174,
            49375,
            49625,
            49875,
            50125,
            50202,
            50310,
            50376,
            50442,
            50541,
            50728,
            50816,
            50912,
            51162,
            51319,
            51469,
            51577,
            51664,
            51712,
            51798,
            51920,
            52004,
            52052,
            52149,
            52219,
            52469,
            52566,
            52653,
            52850,
            53026,
            53276,
            53526,
            53776,
            54026,
            54276,
            54526,
            54675,
            54925,
            54963,
            55027,
            55277,
            55334,
            55371,
            55621,
            55728,
            55800,
            55885,
            56058,
            56308,
            56366,
            56616,
            56724,
            56960,
            57070,
            57320,
            57529,
            57659,
            57709,
            57959,
            58066,
            58316,
            58566,
            58697,
            58760,
            58843,
            59093,
            59279,
            59529,
            59619,
            59707,
            59851,
            59905,
            59989,
            60054,
            60196,
            60259,
            60323,
            60395,
            60420,
            60560,
            60643,
            60719,
            60759,
            61009,
            61259,
            61509,
            61630,
            61880,
            61930,
            61991,
            62241,
            62454,
            62595,
            62714,
            62964,
            63214,
            63449,
            63665,
            63754,
            63887,
            64023,
            64130,
            64280,
            64530,
            64658,
            64707,
            64957,
            65076,
            65155,
            65221,
            65471,
            65572,
            65613,
            65863,
            65893,
            66143,
            66263,
            66352,
            66602,
            66852,
            67102,
            67330,
            67409,
            67659,
            67720,
            67755,
            67793,
            67826,
            68076,
            68199,
            68233,
            68483,
            68551,
            68754,
            68828,
            69078,
            69143,
            69393,
            69546,
            69688,
            69723,
            69778,
            69878,
            69948,
            70155,
            70405,
            70483,
            70666,
            70834,
            71011,
            71059,
            71130,
            71379,
            71418,
            71668,
            71746,
            71825,
            72012,
            72102,
            72141,
            72177,
            72326,
            72542,
            72677,
            72749,
            72803,
            72871,
            73017,
            73073,
            73179,
            73235,
            73427,
            73604,
            73672,
            73922,
            74118,
            74249,
            74332,
            74418,
            74668,
            74918,
            75149,
            75333,
            75435,
            75559,
            75615,
            75726,
            75767,
            75815,
            75973,
            76164,
            76247,
            76283,
            76367,
            76394,
            76447,
            76555,
            76805,
            77055,
            77305,
            77547,
            77797,
            78047,
            78297,
            78547,
            78797,
            79047,
            79292,
            79542,
            79792,
            80038,
            80288,
            80538,
            80788,
            81038,
            81256,
            81506,
            81756,
            82006,
            82256,
            82506,
            82756,
            83006,
            83256,
            83495,
            83745,
            83989,
            84217,
            84467,
            84717,
            84967,
            85217,
            85375,
            85625,
            85787,
            85914,
            86164,
            86414,
            86664,
            86914,
            87147,
            87397,
            87647,
            87897,
            88147,
            88397,
            88647,
            88859,
            89072,
            89322,
            89572,
            89822,
            90072,
            90322,
            90572,
            90822,
            91072,
        )

        f_in = "example.mkv"
        f_out = "example.cut.mkv"

        cutlist_info = smartcut.load_cutlist(stream)
        smartcut.smart_cut_file_by_cutlist(
            f_in,
            f_out,
            cutlist_info["cutlist_frames"],
            workingdir="/tmp/",
            x264_profile="HQ",
        )
        output_reference = [
            (
                "mkvmerge",
                "-D",
                "--split",
                "parts:00:04:24.440-00:23:48.800,+00:29:25.720-00:50:05.960",
                "-o",
                "/tmp/audio_copy.mkv",
                f_in,
            ),
            (
                "x264",
                "--tune",
                "film",
                "--direct",
                "auto",
                "--force-cfr",
                "--rc-lookahead",
                "60",
                "--b-adapt",
                "2",
                "--aq-mode",
                "2",
                "--weightp",
                "0",
                "--profile",
                "high",
                "--level",
                "3.0",
                "--fps",
                "25.0",
                "--demuxer",
                "ffms",
                "--index",
                "/tmp/x264.index",
                "--seek",
                "6611",
                "--frames",
                "135",
                "--output",
                "/tmp/segment-001.mkv",
                f_in,
            ),
            (
                "x264",
                "--tune",
                "film",
                "--direct",
                "auto",
                "--force-cfr",
                "--rc-lookahead",
                "60",
                "--b-adapt",
                "2",
                "--aq-mode",
                "2",
                "--weightp",
                "0",
                "--profile",
                "high",
                "--level",
                "3.0",
                "--fps",
                "25.0",
                "--demuxer",
                "ffms",
                "--index",
                "/tmp/x264.index",
                "--seek",
                "35535",
                "--frames",
                "185",
                "--output",
                "/tmp/segment-002.mkv",
                f_in,
            ),
            (
                "x264",
                "--tune",
                "film",
                "--direct",
                "auto",
                "--force-cfr",
                "--rc-lookahead",
                "60",
                "--b-adapt",
                "2",
                "--aq-mode",
                "2",
                "--weightp",
                "0",
                "--profile",
                "high",
                "--level",
                "3.0",
                "--fps",
                "25.0",
                "--demuxer",
                "ffms",
                "--index",
                "/tmp/x264.index",
                "--seek",
                "44143",
                "--frames",
                "7",
                "--output",
                "/tmp/segment-003.mkv",
                f_in,
            ),
            (
                "mkvmerge",
                "-A",
                "--split",
                "parts-frames:6747-35536,44151-75150",
                "-o",
                "/tmp/segment_copy.mkv",
                f_in,
            ),
            (
                "mkvmerge",
                "--engage",
                "no_cue_duration",
                "--engage",
                "no_cue_relative_position",
                "-o",
                f_out,
                "/tmp/segment-001.mkv",
                "+/tmp/segment_copy-001.mkv",
                "+/tmp/segment-002.mkv",
                "+/tmp/segment-003.mkv",
                "+/tmp/segment_copy-002.mkv",
                "/tmp/audio_copy.mkv",
            ),
        ]
        self.assertEqual(output, output_reference)
